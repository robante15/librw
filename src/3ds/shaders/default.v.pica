	;; Inputs
.alias in_pos     v0
.alias in_normal  v1
.alias in_color   v2
.alias in_tex0    v3

	;; Outputs
.out v_pos	  position
.out v_color      color
.out v_tex0       texcoord0

.proc xform_vertex
	mov	r0.xyz, in_pos		; tmp(r0) = Vec4(in_pos, 0)
	mov	r0.w, ones

	dp4	r8.x, u_world[0], r0 	; V(r8) = world * tmp
	dp4	r8.y, u_world[1], r0
	dp4	r8.z, u_world[2], r0
	dp4	r8.w, u_world[3], r0
	
	dp4	r1.x, u_view[0], r8	; C(r0) = view * V
	dp4	r1.y, u_view[1], r8
	dp4	r1.z, u_view[2], r8
	dp4	r1.w, u_view[3], r8

	dp4	r0.x, u_proj[0], r1	; v_pos = proj * C
	dp4	r0.y, u_proj[1], r1
	dp4	r0.z, u_proj[2], r1
	dp4	r0.w, u_proj[3], r1
.end

;; .proc xform_normal
;; 	mov	r0, in_normal
;; 	mov	r0.w, zeros
;; 	dp3	r1.x, r0.xyz, r0.xyz    ; Normalize
;; 	rsq	r1.x, r1.x
;; 	mul	r0.xyz, r0.xyz, r1.x
	
;; 	dp3	r9.x, u_world[0], r0	; N(r9) = world * in_normal
;; 	dp3	r9.y, u_world[1], r0
;; 	dp3	r9.z, u_world[2], r0
;; 	mov	r9.w, zeros

;; 	dp3	r1.x, r9.xyz, r9.xyz    ; Normalize
;; 	rsq	r1.x, r1.x
;; 	mul	r9.xyz, r9.xyz, r1.x
;; .end

.proc xform_normal
	mov	r0, in_normal
	;dp3	r1.x, r0.xyz, r0.xyz	; Normalize byte vector.
	;rsq	r2.x, r1.x 		; Probably don't need to
	;mul	r0.xyz, r0.xyz, r2.x

	dp3	r9.x, u_world[0], r0	; N(r9) = world * in_normal
	dp3	r9.y, u_world[1], r0
	dp3	r9.z, u_world[2], r0
	;mov	r9.w, zeros

	dp3	r1.x, r9.xyz, r9.xyz    ; Normalize
	rsq	r2.x, r1.x
	mul	r9.xyz, r9.xyz, r2.x
.end
	
.entry default_main
.proc default_main
	call	xform_vertex	; (r8 = world-space vertex)
	mov	v_pos, r0
	call	xform_normal	; (r9 = world-space normal)
	call	DynamicLights
	mov	v_color, r0
	mov	v_tex0, in_tex0
	end
.end
